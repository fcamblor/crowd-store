<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
              http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- DAO layer -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <bean id="dataSource" class="com.crowdstore.persistence.common.UTF8Datasource" destroy-method="close">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <!-- See http://stackoverflow.com/questions/4950396/tomcat-configuration-using-dbcp -->
        <property name="testOnBorrow" value="true"/>
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>

        <!-- Overriden default pool size because in order to have a subsequent datasource pool size... -->
        <property name="initialSize" value="5"/>
        <property name="maxActive" value="20"/>
        <property name="maxIdle" value="2"/>
    </bean>
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <array>
                <!--
                MyBatis XML files will be splitted in 2 categories :
                - Mapping files, which will map column in query to setter in target objects
                - Queries filles, which will contain queries only, mapping on objects defined in mappings category
                Note that we could think the mapping is totally useless here (because MyBatis won't really need
                the mapping since it relies on introspection by default) _but_ the mappings will provide an important
                value-add : the <id> tag which will be used to identify 2 identical records on big result sets
                which should be mapped on collections
                -->
                <value>classpath*:com/crowdstore/persistence/mappings/*.xml</value>
                <value>classpath*:com/crowdstore/persistence/queries/*.xml</value>
            </array>
        </property>
        <property name="typeHandlersPackage" value="org.joda.time.mybatis.handlers"/>
    </bean>

    <!--
    Use this abstract bean as parent to declare a mybatis mapper from an interface (without impl)
    Notice the drawbacks of doing this :
    - No conditionnal queries
    - No SQL completion in IDE
    => This is the reason why we will prefer to use the plain old DAO and exporting sql queries into XML file
    -->
    <bean id="parentMapperDao" abstract="true" class="org.mybatis.spring.mapper.MapperFactoryBean"
          p:sqlSessionFactory-ref="sqlSessionFactory"/>

    <!-- Sample of use of the parentMapperDao ...
    <bean id="referencesDao" parent="parentMapperDao" p:mapperInterface="com.crowdstore.persistence.references.ReferencesDao" />
    -->

</beans>